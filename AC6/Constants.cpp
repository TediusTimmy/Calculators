/*
   This file was part of SlowCalc.

   Copyright (C) 2010, 2011 Thomas DiModica <ricinwich@yahoo.com>

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
   File: Constants.cpp
*/
#include "Constants.hpp"

namespace BigInt
 {

   const Float M_Inf ("Inf");

   const Float M_NaN ("NaN");

      //ONE!
   const Float M_1 (
"1.00000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
"000000000000000000000000000000000000000000000000000000000000"
      );

      //ln(10) = ln(1.25) + 3ln(2)
   const Float M_LN10 (
"2.30258509299404568401799145468436420760110148862877297603332"
"790096757260967735248023599720508959829834196778404228624863"
"340952546508280675666628736909878168948290720832555468084379"
"989482623319852839350530896537773262884616336622228769821988"
"674654366747440424327436515504893431493939147961940440022210"
"510171417480036880840126470806855677432162283552201148046637"
"156591213734507478569476834636167921018064450706480002775026"
"849167465505868569356734206705811364292245544057589257242082"
"413146956890167589402567763113569192920333765871416602301057"
"030896345720754403708474699401682692828084811842893148485249"
      );

      //From Yasumasa Kanada's record, K. Takano's identity:
      //pi = 48 atan(1/49) + 128 atan(1/57) - 20 atan (1/239) + 
      //     48 atan(1/110443)
   const Float M_PI (
"3.14159265358979323846264338327950288419716939937510582097494"
"459230781640628620899862803482534211706798214808651328230664"
"709384460955058223172535940812848111745028410270193852110555"
"964462294895493038196442881097566593344612847564823378678316"
"527120190914564856692346034861045432664821339360726024914127"
"372458700660631558817488152092096282925409171536436789259036"
"001133053054882046652138414695194151160943305727036575959195"
"309218611738193261179310511854807446237996274956735188575272"
"489122793818301194912983367336244065664308602139494639522473"
"719070217986094370277053921717629317675238467481846766940513"
      );

      //pi divided by two, used in various places
   const Float M_PI_2 (
"1.57079632679489661923132169163975144209858469968755291048747"
"229615390820314310449931401741267105853399107404325664115332"
"354692230477529111586267970406424055872514205135096926055277"
"982231147447746519098221440548783296672306423782411689339158"
"263560095457282428346173017430522716332410669680363012457063"
"686229350330315779408744076046048141462704585768218394629518"
"000566526527441023326069207347597075580471652863518287979597"
"654609305869096630589655255927403723118998137478367594287636"
"244561396909150597456491683668122032832154301069747319761236"
"859535108993047185138526960858814658837619233740923383470257"
      );

      //pi divided by four, also used in various places
   const Float M_PI_4 (
"7.85398163397448309615660845819875721049292349843776455243736"
"148076954101571552249657008706335529266995537021628320576661"
"773461152387645557931339852032120279362571025675484630276389"
"911155737238732595491107202743916483361532118912058446695791"
"317800477286412141730865087152613581662053348401815062285318"
"431146751651578897043720380230240707313522928841091973147590"
"002832632637205116630346036737985377902358264317591439897988"
"273046529345483152948276279637018615594990687391837971438181"
"222806984545752987282458418340610164160771505348736598806184"
"297675544965235925692634804294073294188096168704616917351283E-1"
      );

      //two times pi, used to reduce the argument of trig functions
   const Float M_2PI (
"6.28318530717958647692528676655900576839433879875021164194988"
"918461563281257241799725606965068423413596429617302656461329"
"418768921910116446345071881625696223490056820540387704221111"
"928924589790986076392885762195133186689225695129646757356633"
"054240381829129713384692069722090865329642678721452049828254"
"744917401321263117634976304184192565850818343072873578518072"
"002266106109764093304276829390388302321886611454073151918390"
"618437223476386522358621023709614892475992549913470377150544"
"978245587636602389825966734672488131328617204278989279044947"
"438140435972188740554107843435258635350476934963693533881026"
      );

      //one over two times pi, turns a division into a multiplication
      //when reducing the arguments of trig functions
   const Float M_1_2PI (
"1.59154943091895335768883763372514362034459645740456448747667"
"344058896797634226535090113802766253085956072842726757958036"
"892911846114578652877967410731699839229239966937409077573077"
"746396925307688717392896217397661693362390241723629011832380"
"114222699755715940461890086902673956120489410936937844085528"
"723099946443400248672347739459610898323096783074906166986462"
"804699448652187881574786566964241038995874139348609983868099"
"199962442875585171178858431117518767160546547536988009739460"
"364759333768059302494496635305327156775503220324777816397166"
"022946748119598165840606016803035998133911987498832786654435E-1"
      );

      //base ten logarithm of Euler's constant
      //This is 1 / M_LN10, but I use the added speed of one less division
   const Float M_LOG10E (
"4.34294481903251827651128918916605082294397005803666566114453"
"783165864649208870774729224949338431748318706106744766303733"
"641679287158963906569221064662812265852127086568670329593370"
"869658826688331163607738490514284434866676864658608513556148"
"212348765343543435731725383562228139560304864665236609553937"
"735617632343191671099141159789496299351245793492635765546907"
"767108241915047991098967490010327753765357027008732855095173"
"144067469795189951359408804042393151886810840254465408979702"
"986328682876262414401345704354613292060071260510402836712595"
"484628770786199899232674843990234817153593455107947549255248E-1"
      );

      //one over the square root of ten, used in ln to speed things up
   const Float M_1_SQRT10 (
"3.16227766016837933199889354443271853371955513932521682685750"
"485279259443863923822134424810837930029518734728415284005514"
"854885603045388001469051959670015390334492165717925994065915"
"015347411333948412408531692957709047157646104436925787906203"
"780860994182837171154840632855299911859682456420332696160469"
"131433612894979189026652954361267617878135006138818627858046"
"368313495247803114376933467197381951318567840323124179540221"
"830804587284461460025357757970282864402902440797789603454398"
"916334922265261206779265167603104843669779375692615572050036"
"989490946942185000735834884464388273110928910904234805423565E-1"
      );

 } //namespace BigInt
